// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using BookingClient.Json;

namespace BookingClient.Models;

public record SearchInputDto(
    /// <value>The checkin date. Must be within 500 days in the future and in the format yyyy-mm-dd.</value>
    [property: JsonPropertyName("checkin")]
        string Checkin,
    /// <value>
    /// The checkout date. Must be later than (checkin). Must be between 1 and 90 days after (checkin).
    /// Must be within 500 days in the future and in the format yyyy-mm-dd.
    /// </value>
    [property: JsonPropertyName("checkout")]
        string Checkout,
    /// <value>The booker's information.</value>
    [property: JsonPropertyName("booker")]
        BookerInputDto Booker,
    /// <value>The guest details for the request.</value>
    [property: JsonPropertyName("guests")]
        GuestsInputDto Guests,
    /// <value>A three-letter code that uniquely identifies a monetary currency as defined by the ISO 4217 standard.</value>
    [property:
        JsonPropertyName("currency"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Currency = null,
    /// <value>A signed integer number that uniquely identifies a city.</value>
    [property:
        JsonPropertyName("city"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? City = null,
    /// <value>
    /// A two-letter code that uniquely identifies a country.
    /// This code is defined by the ISO 3166-1 alpha-2 standard (ISO2) as described here: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.
    /// </value>
    [property:
        JsonPropertyName("country"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Country = null,
    /// <value>Input parameter to request for additional information about the products.</value>
    [property:
        JsonPropertyName("extras"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<SearchInputDto.SearchInputDtoExtras>? Extras = null,
    /// <value>A signed integer number that uniquely identifies an accommodation property.</value>
    [property:
        JsonPropertyName("accommodations"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<long>? Accommodations = null,
    /// <value>A signed integer number that uniquely identifies an accommodation facility.</value>
    [property:
        JsonPropertyName("accommodation_facilities"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<long>? AccommodationFacilities = null,
    /// <value>A signed integer number that uniquely identifies a room facility.</value>
    [property:
        JsonPropertyName("room_facilities"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<long>? RoomFacilities = null,
    /// <value>A signed integer number that uniquely identifies an accommodation type.</value>
    [property:
        JsonPropertyName("accommodation_types"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<long>? AccommodationTypes = null,
    /// <value>A signed integer number that uniquely identifies a brand.</value>
    [property:
        JsonPropertyName("brands"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<long>? Brands = null,
    /// <value>A three-letter code that uniquely identifies an airport as defined by the International Air Transport Association (IATA).</value>
    [property:
        JsonPropertyName("airport"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Airport = null,
    /// <value>A signed integer number that uniquely identifies a district. Typically, districts define known areas within a city.</value>
    [property:
        JsonPropertyName("district"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? District = null,
    /// <value>A signed integer number that uniquely identifies a relevant geographical landmark, like a monument or a natural attraction.</value>
    [property:
        JsonPropertyName("landmark"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? Landmark = null,
    /// <value>Limit the result list to the specified coordinates.</value>
    [property:
        JsonPropertyName("coordinates"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        Coordinates? Coordinates = null,
    /// <value>
    /// A signed integer number that uniquely identifies a geographical region.
    /// Regions usually define official administrative areas within a country,
    /// but may also include multiple countries and in some cases un-official but popular designations for geographical areas.
    /// An example of a region that crosses multiple countries is the Alps in Europe.
    /// </value>
    [property:
        JsonPropertyName("region"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? Region = null,
    /// <value>The maximum number of results to return.</value>
    [property:
        JsonPropertyName("rows"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? Rows = null,
    /// <value>Pagination token used to retrieve the next page of results. Obtained from `next_page`.</value>
    [property:
        JsonPropertyName("page"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Page = null
)
{
    /// <summary>Input parameter to request for additional information about the products.</summary>
    public record SearchInputDtoExtras : ValueEnum<string>
    {
        internal SearchInputDtoExtras(string value)
            : base(value) { }

        public SearchInputDtoExtras()
            : base("EXTRA_CHARGES") { }

        public static SearchInputDtoExtras ExtraCharges = new("EXTRA_CHARGES");
        public static SearchInputDtoExtras Products = new("PRODUCTS");
    }
}

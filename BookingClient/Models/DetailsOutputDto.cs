// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;

namespace BookingClient.Models;

public record DetailsOutputDto(
    /// <value>A signed integer number that uniquely identifies an accommodation property.</value>
    [property: JsonPropertyName("id"), JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        long? Id = null,
    /// <value>Translated description of this room. The maximum number of characters returned may be limited by contract.</value>
    [property:
        JsonPropertyName("name"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        TranslatedString? Name = null,
    /// <value>
    /// A signed integer number that uniquely identifies an accommodation property type.
    /// Examples of accommodation types are: Apartment, Hostel, Hotel etc.
    /// </value>
    [property:
        JsonPropertyName("accommodation_type"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? AccommodationType = null,
    /// <value>A signed integer number that uniquely identifies an accommodation brand.</value>
    [property:
        JsonPropertyName("brands"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<long>? Brands = null,
    [property:
        JsonPropertyName("checkin_checkout_times"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        CheckinCheckoutTimesDto? CheckinCheckoutTimes = null,
    /// <value>Contact information of the accommodation.</value>
    [property:
        JsonPropertyName("contacts"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        ContactsDto? Contacts = null,
    /// <value>A three-letter code that uniquely identifies a monetary currency as defined by the ISO 4217 standard.</value>
    [property:
        JsonPropertyName("currency"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Currency = null,
    /// <value>The list of facilities available in this property. Requires `{"extras":["facilities"]}`.</value>
    [property:
        JsonPropertyName("facilities"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<FacilityDto>? Facilities = null,
    /// <value>Deep link mobile app URL.</value>
    [property:
        JsonPropertyName("deep_link_url"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? DeepLinkUrl = null,
    /// <value>Textual information about the accommodation. Requires `{"extras":["description"]}`.</value>
    [property:
        JsonPropertyName("description"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        DescriptionDto? Description = null,
    /// <value>Flags if this accommodation is work friendly.</value>
    [property:
        JsonPropertyName("is_work_friendly"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        bool? IsWorkFriendly = null,
    [property:
        JsonPropertyName("key_collection_information"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<KeyCollectionInformationDto>? KeyCollectionInformation = null,
    /// <value>All location related information of this accommodation property.</value>
    [property:
        JsonPropertyName("location"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        LocationDto? Location = null,
    /// <value>
    /// Total number of rooms in the property.
    /// Please note that this is not an availability call and that this number is mostly used to determine the size and type of a property.
    /// </value>
    [property:
        JsonPropertyName("number_of_rooms"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? NumberOfRooms = null,
    /// <value>Payment terms and conditions for this product.</value>
    [property:
        JsonPropertyName("payment"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        PaymentDto? Payment = null,
    /// <value>
    /// List of photos for this accommodation property.The maximum number of photos returned may be limited by contract.
    /// Requires `{"extras":["photos"]}`. The photos are returned in no particular order.
    /// </value>
    [property:
        JsonPropertyName("photos"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<PhotoDto>? Photos = null,
    /// <value>The policies for this product.</value>
    [property:
        JsonPropertyName("policies"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        PoliciesDto? Policies = null,
    /// <value>
    /// Indicates the qualitative price reference (between $ and $$$$) on how expensive an accommodation is.
    /// Accommodations in the same city are sorted by ascending price (average per guest per night in the last month),
    /// the ones in the lowest 25 percentile are in category $, between 25 and 50 percentile are in category $$,
    /// between 50 and 75 percentile are in category $$$, remaining ones are in category $$$$.
    /// </value>
    [property:
        JsonPropertyName("price_category"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? PriceCategory = null,
    /// <value>Details of programmes undergone by the property.</value>
    [property:
        JsonPropertyName("programmes"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        ProgramSettingsDto? Programmes = null,
    [property:
        JsonPropertyName("rating"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        RatingDto? Rating = null,
    /// <value>The list of room types available at this property. Requires `{"extras":["rooms"]}`.</value>
    [property:
        JsonPropertyName("rooms"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<RoomDto>? Rooms = null,
    [property:
        JsonPropertyName("spoken_languages"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<string>? SpokenLanguages = null,
    [property:
        JsonPropertyName("themes"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<long>? Themes = null,
    [property: JsonPropertyName("url"), JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        string? Url = null
);

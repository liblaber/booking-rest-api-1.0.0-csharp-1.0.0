// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;

namespace BookingClient.Models;

/// <summary>Hotel specific information.</summary>
public record HotelDataDto(
    /// <value>The street address of the hotel.</value>
    [property:
        JsonPropertyName("address"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Address = null,
    /// <value>Id of the city where this property is located.</value>
    [property:
        JsonPropertyName("city_id"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? CityId = null,
    /// <value>Two-letter ISO country code of the hotel.</value>
    [property:
        JsonPropertyName("country"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Country = null,
    /// <value>A signed integer number that uniquely identifies a city.</value>
    [property:
        JsonPropertyName("location"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        CoordinatesDto? Location = null,
    /// <value>Hotel ZIP code</value>
    [property:
        JsonPropertyName("zip"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Zip = null,
    /// <value>Three-letter ISO currency code for the hotel.</value>
    [property:
        JsonPropertyName("currency"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Currency = null,
    [property:
        JsonPropertyName("checkin_checkout_times"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        CheckinCheckoutTimesDto? CheckinCheckoutTimes = null,
    /// <value>Photos specific information of the hotel.</value>
    [property:
        JsonPropertyName("hotel_photos"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<HotelPhotoDto>? HotelPhotos = null,
    /// <value>The description text for this hotel.</value>
    [property:
        JsonPropertyName("hotel_description"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? HotelDescription = null,
    /// <value>URL of the hotel's page on Booking.com.</value>
    [property:
        JsonPropertyName("url"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Url = null,
    /// <value>Deep link mobile app URL.</value>
    [property:
        JsonPropertyName("deep_link_url"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? DeepLinkUrl = null,
    /// <value>List of region_ids that the hotel belongs to</value>
    [property:
        JsonPropertyName("region_ids"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<long>? RegionIds = null,
    /// <value>Number of reviews for this hotel.</value>
    [property:
        JsonPropertyName("number_of_reviews"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? NumberOfReviews = null,
    /// <value>Review score of this hotel.</value>
    [property:
        JsonPropertyName("review_score"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        double? ReviewScore = null,
    /// <value>Languages spoken by the hotel's staff</value>
    [property:
        JsonPropertyName("spoken_languages"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<string>? SpokenLanguages = null
);

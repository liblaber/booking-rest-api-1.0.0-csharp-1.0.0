// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using BookingClient.Json;

namespace BookingClient.Models;

public record DetailsInputDto(
    /// <value>A signed integer number that uniquely identifies an accommodation property.</value>
    [property:
        JsonPropertyName("accommodations"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<long>? Accommodations = null,
    /// <value>
    /// A signed integer number that uniquely identifies an accommodation property facility.
    /// Examples of facilities are: Parking, Restaurant, Room service etc.
    /// </value>
    [property:
        JsonPropertyName("accommodation_facilities"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<long>? AccommodationFacilities = null,
    /// <value>
    /// A signed integer number that uniquely identifies an accommodation property type.
    /// Examples of accommodation types are: Apartment, Hostel, Hotel etc.
    /// </value>
    [property:
        JsonPropertyName("accommodation_types"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<long>? AccommodationTypes = null,
    /// <value>A three-letter code that uniquely identifies an airport as defined by the International Air Transport Association (IATA).</value>
    [property:
        JsonPropertyName("airport"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Airport = null,
    /// <value>
    /// A signed integer number that uniquely identifies an accommodation brand.
    /// Examples of brands are: Radisson Blu, WestCord Hotels, Westin etc.
    /// </value>
    [property:
        JsonPropertyName("brands"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<long>? Brands = null,
    /// <value>A signed integer number that uniquely identifies a city.</value>
    [property:
        JsonPropertyName("city"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? City = null,
    /// <value>
    /// A two-letter code that uniquely identifies a country.
    /// This code is defined by the ISO 3166-1 alpha-2 standard (ISO2) as described here: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.
    /// </value>
    [property:
        JsonPropertyName("country"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Country = null,
    /// <value>
    /// A signed integer number that uniquely identifies a geographical region.
    /// Regions usually define official administrative areas within a country,
    /// but may also include multiple countries and in some cases un-official but popular designations for geographical areas.
    /// An example of a region that crosses multiple countries is the Alps in Europe.
    /// </value>
    [property:
        JsonPropertyName("region"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? Region = null,
    /// <value>
    /// Input parameter to request for additional information about the accommodation property.
    /// It should be passed as a JSON array with one or more items.
    /// </value>
    [property:
        JsonPropertyName("extras"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<DetailsInputDto.DetailsInputDtoExtras>? Extras = null,
    /// <value>
    /// An IETF language tag code that uniquely identifies a supported human language or dialect as described here:
    /// https://en.wikipedia.org/wiki/IETF_language_tag.
    ///
    /// Note that in in demand-api-v3-compatible the whole tag is always lowercase.
    /// Examples: "nl" for Dutch/Nederlands or "en-us" for English (US).
    /// </value>
    [property:
        JsonPropertyName("languages"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<DetailsInputDto.DetailsInputDtoLanguages>? Languages = null,
    /// <value>The maximum number of results to return.</value>
    [property:
        JsonPropertyName("rows"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? Rows = null,
    /// <value>Pagination token used to retrieve the next page of results. Obtained from `next_page`.</value>
    [property:
        JsonPropertyName("page"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Page = null
)
{
    /// <summary>
    /// Input parameter to request for additional information about the accommodation property.
    /// It should be passed as a JSON array with one or more items.
    /// </summary>
    public record DetailsInputDtoExtras : ValueEnum<string>
    {
        internal DetailsInputDtoExtras(string value)
            : base(value) { }

        public DetailsInputDtoExtras()
            : base("DESCRIPTION") { }

        public static DetailsInputDtoExtras Description = new("DESCRIPTION");
        public static DetailsInputDtoExtras Facilities = new("FACILITIES");
        public static DetailsInputDtoExtras Payment = new("PAYMENT");
        public static DetailsInputDtoExtras Photos = new("PHOTOS");
        public static DetailsInputDtoExtras Policies = new("POLICIES");
        public static DetailsInputDtoExtras Rooms = new("ROOMS");
    }

    /// <summary>
    /// An IETF language tag code that uniquely identifies a supported human language or dialect as described here:
    /// https://en.wikipedia.org/wiki/IETF_language_tag.
    ///
    /// Note that in in demand-api-v3-compatible the whole tag is always lowercase.
    /// Examples: "nl" for Dutch/Nederlands or "en-us" for English (US).
    /// </summary>
    public record DetailsInputDtoLanguages : ValueEnum<string>
    {
        internal DetailsInputDtoLanguages(string value)
            : base(value) { }

        public DetailsInputDtoLanguages()
            : base("AR") { }

        public static DetailsInputDtoLanguages Ar = new("AR");
        public static DetailsInputDtoLanguages Bg = new("BG");
        public static DetailsInputDtoLanguages Ca = new("CA");
        public static DetailsInputDtoLanguages Cs = new("CS");
        public static DetailsInputDtoLanguages Da = new("DA");
        public static DetailsInputDtoLanguages De = new("DE");
        public static DetailsInputDtoLanguages El = new("EL");
        public static DetailsInputDtoLanguages En = new("EN");
        public static DetailsInputDtoLanguages EnGb = new("EN_GB");
        public static DetailsInputDtoLanguages EnUs = new("EN_US");
        public static DetailsInputDtoLanguages Es = new("ES");
        public static DetailsInputDtoLanguages EsAr = new("ES_AR");
        public static DetailsInputDtoLanguages EsMx = new("ES_MX");
        public static DetailsInputDtoLanguages Et = new("ET");
        public static DetailsInputDtoLanguages Fi = new("FI");
        public static DetailsInputDtoLanguages Fr = new("FR");
        public static DetailsInputDtoLanguages He = new("HE");
        public static DetailsInputDtoLanguages Hi = new("HI");
        public static DetailsInputDtoLanguages Hr = new("HR");
        public static DetailsInputDtoLanguages Hu = new("HU");
        public static DetailsInputDtoLanguages Id = new("ID");
        public static DetailsInputDtoLanguages Is_ = new("IS");
        public static DetailsInputDtoLanguages It = new("IT");
        public static DetailsInputDtoLanguages Ja = new("JA");
        public static DetailsInputDtoLanguages Ka = new("KA");
        public static DetailsInputDtoLanguages Ko = new("KO");
        public static DetailsInputDtoLanguages Lt = new("LT");
        public static DetailsInputDtoLanguages Lv = new("LV");
        public static DetailsInputDtoLanguages Ms = new("MS");
        public static DetailsInputDtoLanguages Nl = new("NL");
        public static DetailsInputDtoLanguages No = new("NO");
        public static DetailsInputDtoLanguages Pl = new("PL");
        public static DetailsInputDtoLanguages PtBr = new("PT_BR");
        public static DetailsInputDtoLanguages PtPt = new("PT_PT");
        public static DetailsInputDtoLanguages Ro = new("RO");
        public static DetailsInputDtoLanguages Ru = new("RU");
        public static DetailsInputDtoLanguages Sk = new("SK");
        public static DetailsInputDtoLanguages Sl = new("SL");
        public static DetailsInputDtoLanguages Sr = new("SR");
        public static DetailsInputDtoLanguages Sv = new("SV");
        public static DetailsInputDtoLanguages Th = new("TH");
        public static DetailsInputDtoLanguages Tl = new("TL");
        public static DetailsInputDtoLanguages Tr = new("TR");
        public static DetailsInputDtoLanguages Uk = new("UK");
        public static DetailsInputDtoLanguages Vi = new("VI");
        public static DetailsInputDtoLanguages ZhCn = new("ZH_CN");
        public static DetailsInputDtoLanguages ZhTw = new("ZH_TW");
    }
}

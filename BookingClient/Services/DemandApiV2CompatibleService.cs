// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using BookingClient.Http;
using BookingClient.Http.Serialization;
using BookingClient.Models;

namespace BookingClient.Services;

public class DemandApiV2CompatibleService : BaseService
{
    internal DemandApiV2CompatibleService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>
    /// Gives information about review scores for specified hotel_ids and filter.
    /// The information consists of score breakdown per reviewer_type and review questions,
    /// and overall score distribution per score value (1 - 10).
    ///
    /// The available filter is input parameter reviewer_type=... .
    /// It allows generating review score information for just one reviewer type.
    ///
    /// Language in which the response is rendered can be controlled with the input parameter language=...
    /// (default: 'en'). Setting the language will reflect on the output fields question and review_score_word.
    ///
    /// One additional output field can be requested with input parameter extras=review_score_word.
    /// </summary>
    public async Task<ResponseOutputV2ReviewScoresOutputDto> GetHotelsReviewScoresAsync(
        ReviewScoresInputDto reviewScoresInputDto,
        GetHotelsReviewScoresAccept? accept = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(reviewScoresInputDto, nameof(reviewScoresInputDto));

        var request = new RequestBuilder(HttpMethod.Get, "demand-api-v2-compatible/reviewScores")
            .SetQueryParameter("reviewScoresInputDto", reviewScoresInputDto)
            .SetOptionalHeader("Accept", accept?.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<ResponseOutputV2ReviewScoresOutputDto>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// This call returns the hotel and room data. By default, only hotel_id is returned in the output.
    ///
    /// One of the argument: hotel_ids, city_ids, country_ids, region_ids, district_ids, chain_ids is mandatory.
    ///
    /// Additional data needs to be requested via extras parameter.
    ///
    /// The data is returned in English by default.
    /// </summary>
    public async Task<ResponseOutputV2HotelsOutputDto> GetHotelsAsync(
        HotelsInputDto hotelsInput,
        GetHotelsAccept? accept = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(hotelsInput, nameof(hotelsInput));

        var request = new RequestBuilder(HttpMethod.Get, "demand-api-v2-compatible/hotels")
            .SetQueryParameter("hotelsInput", hotelsInput)
            .SetOptionalHeader("Accept", accept?.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<ResponseOutputV2HotelsOutputDto>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>This endpoint returns hotel types names and their translations. (EN is default)</summary>
    public async Task<ResponseOutputV2HotelTypesOutputDto> GetHotelTypesAsync(
        HotelTypeInputDto hotelTypeInputDto,
        GetHotelTypesAccept? accept = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(hotelTypeInputDto, nameof(hotelTypeInputDto));

        var request = new RequestBuilder(HttpMethod.Get, "demand-api-v2-compatible/hotelTypes")
            .SetQueryParameter("hotelTypeInputDTO", hotelTypeInputDto)
            .SetOptionalHeader("Accept", accept?.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<ResponseOutputV2HotelTypesOutputDto>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>This endpoint returns a list of hotel theme types (in English).</summary>
    public async Task<ResponseOutputV2HotelThemeTypesOutputDto> GetHotelThemeTypesAsync(
        HotelThemeTypeInputDto hotelThemeTypeInputDto,
        GetHotelThemeTypesAccept? accept = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(hotelThemeTypeInputDto, nameof(hotelThemeTypeInputDto));

        var request = new RequestBuilder(HttpMethod.Get, "demand-api-v2-compatible/hotelThemeTypes")
            .SetQueryParameter("hotelThemeTypeInputDTO", hotelThemeTypeInputDto)
            .SetOptionalHeader("Accept", accept?.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<ResponseOutputV2HotelThemeTypesOutputDto>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>This endpoint returns room facility types names and their translations (EN is default).</summary>
    public async Task<ResponseOutputV2HotelFacilityTypeOutputDto> GetRoomFacilityTypesAsync(
        HotelFacilityInputDto hotelFacilityInputDto,
        GetRoomFacilityTypesAccept? accept = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(hotelFacilityInputDto, nameof(hotelFacilityInputDto));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "demand-api-v2-compatible/hotelFacilityTypes"
        )
            .SetQueryParameter("hotelFacilityInputDto", hotelFacilityInputDto)
            .SetOptionalHeader("Accept", accept?.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<ResponseOutputV2HotelFacilityTypeOutputDto>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// This endpoint returns the cheapest available room for each hotel matching your check-in and check-out dates.
    /// You can search for hotels in a city, or for a specific list of (upto 300) hotels by hotel_ids.
    /// Here you will find whether the price included breakfast or other meals, as well as whether it is possible to cancel for free.
    /// It is possible to have a breakdown of the price returned by this endpoint and to filter by property types and/or hotel facilities.
    /// </summary>
    public async Task<ResponseOutputV2HotelAvailabilityOutputDto> GetHotelAvailabilityAsync(
        HotelAvailabilityInputDto hotelAvailabilityInputDto,
        GetHotelAvailabilityAccept? accept = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(
            hotelAvailabilityInputDto,
            nameof(hotelAvailabilityInputDto)
        );

        var request = new RequestBuilder(
            HttpMethod.Get,
            "demand-api-v2-compatible/hotelAvailability"
        )
            .SetQueryParameter("hotelAvailabilityInputDto", hotelAvailabilityInputDto)
            .SetOptionalHeader("Accept", accept?.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<ResponseOutputV2HotelAvailabilityOutputDto>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// This endpoint is where you find a list of all bookable or available rooms at a property.
    /// A room can have multiple blocks, as a block is a combination of the meal, cancellation policy, occupancy and other things.
    /// You can find detailed information about one hotel per search (detail_level)
    /// which will return most of the information needed to replicate the booking.com property page.
    ///
    /// If you want to search multiple hotels, you can, but you get less detail.
    /// For searching multiple hotels, it is recommended to use hotelAvailability.
    /// </summary>
    public async Task<ResponseOutputV2BlockAvailabilityOutputDto> GetBlockAvailabilityAsync(
        BlockAvailabilityInputDto blockInput,
        GetBlockAvailabilityAccept? accept = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(blockInput, nameof(blockInput));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "demand-api-v2-compatible/blockAvailability"
        )
            .SetQueryParameter("blockInput", blockInput)
            .SetOptionalHeader("Accept", accept?.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<ResponseOutputV2BlockAvailabilityOutputDto>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
